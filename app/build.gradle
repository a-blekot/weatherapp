plugins {
    id("com.android.application")
    id("com.google.gms.google-services")
    id("kotlin-android")
    id("kotlin-kapt")
    id("com.google.firebase.crashlytics")
    id("androidx.navigation.safeargs")
    id("io.gitlab.arturbosch.detekt").version("1.15.0")
}

android {
    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropsFile = file("keystore/keystore_config")
            storeFile file('/home/a-blekot/AndroidStudioProjects/weatherapp/app/weatherapp-keystore.jks')
            storePassword 'superPSWD123!'
            keyAlias 'key0'
            keyPassword 'super123'

            if (keystorePropsFile.exists()) {
                file("keystore/keystore_config").withInputStream { keystoreProperties.load(it) }
                storeFile file("$keystoreProperties.storeFile")
                storePassword "$keystoreProperties.storePassword"
                keyAlias "$keystoreProperties.keyAlias"
                keyPassword "$keystoreProperties.keyPassword"
            } else {
                storeFile file("keystore/weather-info-keystore.jks")
                storePassword System.getenv('KEYSTORE_PASSWORD')
                keyAlias System.getenv('RELEASE_SIGN_KEY_ALIAS')
                keyPassword System.getenv('RELEASE_SIGN_KEY_PASSWORD')
            }
        }
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.anadi.weatherapp"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 2
        versionName "0.2"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.incremental":"true"]
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
//            applicationIdSuffix = ".debug"
            versionNameSuffix "-debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    lintOptions {
        abortOnError false
        disable 'ContentDescription'
        quiet true
        lintConfig file("$project.rootDir/lint.xml")
        htmlOutput file("$project.buildDir/outputs/lint/lint.html")
        warningsAsErrors true
        xmlReport false
    }

    detekt {
        input = files("src/main/java")                          // The directories where detekt looks for input files. Defaults to `files("src/main/java", "src/main/kotlin")`.
        parallel = true                                         // Builds the AST in parallel. Rules are always executed in parallel. Can lead to speedups in larger projects. `false` by default.
//        filters = ".*build.*,.*/resources/.*,.*/tmp/.*"         // Regular expression of paths that should be excluded separated by `;` or `,`.
        config = files("$rootDir/config/detekt-config.yml")     // Define the detekt configuration(s) you want to use. Defaults to the default detekt configuration.
//        baseline = file("$rootDir/config/baseline.xml")         // a way of suppressing issues before introducing detekt
        reports {
            xml {
                enabled = true                                  // Enable/Disable XML report (default: true)
                destination = file("build/reports/detekt.xml")  // Path where XML report will be stored (default: `build/reports/detekt/detekt.xml`)
            }
            html {
                enabled = true                                  // Enable/Disable HTML report (default: true)
                destination = file("build/reports/detekt.html") // Path where HTML report will be stored (default: `build/reports/detekt/detekt.html`)
            }
        }
        failFast = true // fail build on any finding
        buildUponDefaultConfig = true // preconfigure defaults
    }

    task("checkAll") {
        group "Verify"
        description "Runs kotlin static checks on the build"
        dependsOn "detekt"
    }
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.google.android.material:material:1.3.0'

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.3.0'

    // OK_HTTP
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Stetho
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    //ViewBindingDelegate
    implementation 'com.kirich1409.viewbindingpropertydelegate:viewbindingpropertydelegate:1.4.0'

    // KTX
    implementation "androidx.core:core-ktx:1.3.2"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.4.0')

    implementation 'com.google.firebase:firebase-core:'
    implementation 'com.google.firebase:firebase-common-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-messaging-directboot'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-database'

//    implementation 'com.google.android.gms:play-services-gcm'

    // Dagger
    api 'com.google.dagger:dagger:2.28.3'
    kapt 'com.google.dagger:dagger-compiler:2.28.3'
    api 'com.google.dagger:dagger-android-support:2.28.3'
    kapt 'com.google.dagger:dagger-android-processor:2.28.3'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.3"

    // ViewModel
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Room
    def room_version = "2.3.0-beta01"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:2.5.0"

    // Notifications DSL
    implementation 'com.kirich1409.android-notification-dsl:core:0.1.0'
    implementation 'com.kirich1409.android-notification-dsl:extensions:0.1.0'

    // Geo location
    implementation 'com.google.android.libraries.places:places:2.4.0'

    // Joda
    implementation 'net.danlew:android.joda:2.10.6.1'

    implementation 'com.github.GrenderG:Toasty:1.5.0'
}
repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}
